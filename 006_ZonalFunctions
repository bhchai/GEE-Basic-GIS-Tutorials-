//006_MAPGG_Zonal Functions


Map.setCenter(-109.47043,0.01545, 14);

//Map.addLayer(border);

// Fill and outline the polygons in two colors
var region = ee.Image(0).byte()
    .paint(border, 2)       // Fill with 2
    .paint(border, 1, 6);   // Outline with 1, width 6.

// Mask off everything that matches the fill color.
var reverseMask = region.mask(region.neq(2));


/*----------------------------------------------------------------------*/
// Brin in data layers

var combinedDict = elevation
  .reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: elevation.geometry(), 
  scale: 20
});
print('Combined:', combinedDict);

var comarrdict = combinedDict.toArray();
//print("Combined Array:", comarrdict.getInfo());

var dictmax = ee.Number(comarrdict.get([0]));
print ('Maximum Elevation:', dictmax);

var dictmin = ee.Number(comarrdict.get([1]));
print ('Minimum Elevation:', dictmin);

var elevation_vis = elevation.visualize({min:dictmin, max:dictmax, palette:['593118','605326','ceab90']});
Map.addLayer(elevation_vis, null, 'Elevation');

//Vegetation

var vegpalette = ['699660'/*Hardwood Forest*/,  '469336'/*Softwood Forest*/,  '1c8904'/*Mixed Forest*/ ];
var vegscore = vegetation.remap([1,2,3,4],[0,2,3,4],0);
Map.addLayer(vegscore.mask(vegscore), {min:2, max:3, opacity:0.4, palette:vegpalette}, 'Vegetation');

//Hydrology
var hydpalette = ["99ccff" /*Stream*/, "009966" /*Wetland*/, "3366ff" /*Pond*/];
Map.addLayer(hydrology.mask(hydrology), {min:1, max:3, palette:hydpalette}, 'Hydrology');


//Development
var devpalette = ["000000" /*Major Road*/, "003333" /*Minor Road*/, "ff00cc" /*Residence*/,
                  "cc0000" /*Public Building*/, "ffff33" /*Cemtery*/ ];
Map.addLayer(development.mask(development), {min:1, max:5, palette:devpalette}, 'Development');


//Make the band names of each layer match
var veg = vegetation.toInt().select([0]);
var ele = elevation.toInt().select([0]);
var dev = development.toInt().select([0]);
var hyd = hydrology.toInt().select([0]);

//Put Score Layers into a list
var layersAsBands = veg.addBands(ele).addBands(dev).addBands(hyd);
//Map.addLayer(layerCollection.select([2]), {min:0, max:9}, 'Input Layers as a Multi-Band Image');


/*---------------------------------------------------------------------*/
// Reclassify the layers And Get Distance Buffers

var distpalette = ['ffcf64,eda255,e26b32,d24f11,eb3850,ff1b3a,e61374',
                    'e70fb8,c30ada,8619ff,2b11ff'];
                    
var roads = development.remap([1,2],[1,1],0).clip(border);
//Map.addLayer(roads.mask(roads), {min:0, max:1, palette:['00ff00', 'ff00ff']}, 'Only Roads');

var roadkernel = ee.Kernel.euclidean(20, "meters");
var fatRoads = roads.distance(roadkernel);
//Map.addLayer(fatRoads, {min:0, max:20, palette:distpalette}, 'Fattened Roads');

var buildings = development.remap([3,4],[1,1],0);
//Map.addLayer(buildings, {min:0, max:1, palette:['00ff00', 'ff00ff']}, 'AllBuidings');
                  
var bldgskernel = ee.Kernel.euclidean(100, "meters");
var distfbldgs = buildings.distance(bldgskernel);
//Map.addLayer(distfbldgs, {min:0, max:100, palette:distpalette}, 'Distance from Buildsings');
var farBuildings = distfbldgs.expression(
   "(b(0) <= 100) ? 0 \
       : 1"
 ).clip(border);
var farBuildingsmsk = farBuildings.mask(farBuildings);
//Map.addLayer(farBuildingsmsk, {min:0, max:1, palette:['000000', 'ff3c99']}, 'Everything But Buildings');

/*---------------------------------------------------------------------*/
// Get noRoad Islands
var noRoads = fatRoads.expression(
   "(b(0) <= 20) ? 0 \
       : 1"
 ).clip(border);
var noRoadsmsk = noRoads.mask(noRoads);
//Map.addLayer(noRoadsmsk, {min:0, max:1, palette:['000000', 'ff3c99']}, 'Everything But Roads');

var finalIslands = noRoadsmsk.multiply(farBuildingsmsk);
//Map.addLayer(finalIslands, {}, 'Far From Buildings Islands');

var islandKernel = ee.Kernel.cross(20, "meters");
var islandRegions = finalIslands.connectedComponents(islandKernel, 256);
Map.addLayer(islandRegions.randomVisualizer(), {}, 'No Road Islands', false);

//Make Regions a two band image for the next operation
var RTV = finalIslands.addBands(finalIslands);

//Make Regions Vectors to do zonal statistics
var vectors = RTV.reduceToVectors({
  reducer: ee.Reducer.first(),
  geometry: border.geometry(), 
  scale: 20, 
  bestEffort: true 
  });
//Map.addLayer(vectors, null, 'Islands as Vectors');
//print(vectors.getInfo());

//Find the area of each Region
var vectorArea = vectors.map(function(f) { 
 return f.set({area: f.geometry().convexHull().area(5)}); 
}); 
//print(vectorArea.getInfo());

var regionArea = vectorArea.filterMetadata('area', 'greater_than', 100000);
//Map.addLayer(regionArea, null, 'Area Of Regions');


//Find out Which Island has the most water
var pondsRivers = hydrology.remap([1,3],[1,1],0);

var pondsRiversmsk = pondsRivers.clip(vectors);
//Map.addLayer(pondsRiversmsk);

var howmuchWater = pondsRiversmsk.reduceRegions(regionArea,ee.Reducer.sum(),20);
//print(howmuchWater.getInfo());

var waterNumbers = howmuchWater.reduceToImage(['sum'], ee.Reducer.max());
//Map.addLayer(waterNumbers, {min:0, max:350, palette:['0000ff', '0cff00']}, 'Water Numbers');

var waterMinMax = waterNumbers
  .reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: border.geometry(), 
  scale: 20
});

var waterArray = waterMinMax.toArray();
//print("Combined Array:", waterArray.getInfo());

var waterMax = waterArray.get([0]);
//print ('Maximum Water In Vectors:', waterMax);

var waterMin = waterMinMax.get([1]);
// print ('Minimum Water in Regions:', dictmin.getInfo());

// // Add thresholded image to map.
var finalRegion = waterNumbers.eq(waterMax);
Map.addLayer(finalRegion.mask(finalRegion), {min:0, max:1, opacity:0.8, palette:['3d0521']}, 'Site Selection for Dog Olympics');



Map.addLayer(reverseMask, {palette: '09464c,381311',max: 1, opacity: 1}, 'Frame');





/*---------------------------Guide for script------------------------------------------*/
/*  

!! Note, the background and reverse mask, while visually pleasing, is usually unnessecary in GEE.  In this
   example, however, it is particularly useful given that our image layers have not geographic location attached
   to them, and we do not want to assign any.
  

Map Algebra Operations:
  + ZONAL MAX
  + ZONAL MIN
  + ZONAL GEOMETRY
  + ZONAL SUM
  + REGION GROUP
  + EUCLIDEAN DISTANCE

Tools for this session:
  REDUCE REGION
  REDUCE REGIONS
  DISTANCE
  TO ARRAY
  GET
  


  
==TOOLS==

  REDUCE REGION
  REDUCE REGIONS
  DISTANCE
  TOARRAY
  GET



==EXAMPLES==
    

*/
